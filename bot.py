from telebot import TeleBot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
from logic import *
import schedule
import threading
import time
from config import *

bot = TeleBot(API_TOKEN)
manager = DatabaseManager(DATABASE)
manager.create_tables()

def gen_markup(prize_id):
    markup = InlineKeyboardMarkup()
    markup.add(InlineKeyboardButton("–ü–æ–ª—É—á–∏—Ç—å!", callback_data=str(prize_id)))
    return markup

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.chat.id
    username = message.from_user.username or "noname"
    if user_id in manager.get_users():
        bot.reply_to(message, "–¢—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω!")
    else:
        manager.add_user(user_id, username)
        bot.reply_to(message, """–ü—Ä–∏–≤–µ—Ç! –¢—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! üéâ

–ö–∞–∂–¥—ã–π —á–∞—Å —Ç–µ–±–µ –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –Ω–æ–≤—ã–µ –∫–∞—Ä—Ç–∏–Ω–∫–∏. –£ —Ç–µ–±—è –±—É–¥–µ—Ç —à–∞–Ω—Å –∏—Ö –ø–æ–ª—É—á–∏—Ç—å, –µ—Å–ª–∏ —Ç—ã –Ω–∞–∂–º–µ—à—å –Ω–∞ –∫–Ω–æ–ø–∫—É '–ü–æ–ª—É—á–∏—Ç—å!' –±—ã—Å—Ç—Ä–µ–µ –¥—Ä—É–≥–∏—Ö.

‚ö†Ô∏è –¢–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ª—É—á–∞—Ç –ø—Ä–∏–∑!""")

@bot.message_handler(commands=['rating'])
def handle_rating(message):
    res = manager.get_rating()
    if not res:
        bot.send_message(message.chat.id, "–†–µ–π—Ç–∏–Ω–≥ –ø–æ–∫–∞ –ø—É—Å—Ç.")
        return

    lines = [f'| @{x[0]:<11} | {x[1]:<11}|\n{"_"*26}' for x in res]
    header = f'| USER_NAME   | COUNT_PRIZE|\n{"_"*26}'
    table = header + '\n' + '\n'.join(lines)
    bot.send_message(message.chat.id, table)

@bot.callback_query_handler(func=lambda call: True)
def callback_query(call):
    prize_id = int(call.data)
    user_id = call.message.chat.id
    username = call.from_user.username or "noname"

    manager.add_user(user_id, username)

    if manager.get_winners_count(prize_id) < 3:
        if manager.add_winner(user_id, prize_id):
            img = manager.get_prize_img(prize_id)
            if img:
                with open(f'img/{img}', 'rb') as photo:
                    bot.send_photo(user_id, photo, caption="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –¢—ã –ø–æ–ª—É—á–∏–ª –ø—Ä–∏–∑!")
            else:
                bot.send_message(user_id, "–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        else:
            bot.send_message(user_id, "‚ùó –¢—ã —É–∂–µ –ø–æ–ª—É—á–∞–ª —ç—Ç–æ—Ç –ø—Ä–∏–∑.")
    else:
        bot.send_message(user_id, "üòî –≠—Ç–æ—Ç –ø—Ä–∏–∑ —É–∂–µ –∑–∞–±—Ä–∞–ª–∏ 3 —á–µ–ª–æ–≤–µ–∫–∞.")

def send_message():
    prize = manager.get_random_prize()
    if not prize:
        print("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤.")
        return

    prize_id, img = prize
    manager.mark_prize_used(prize_id)
    hide_img(img)

    for user in manager.get_users():
        try:
            with open(f'hidden_img/{img}', 'rb') as photo:
                bot.send_photo(user, photo, reply_markup=gen_markup(prize_id))
        except Exception as e:
            print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")

def schedule_thread():
    schedule.every(1).hours.do(send_message)  # –º–µ–Ω—è–π –Ω–∞ every(30).seconds –¥–ª—è —Ç–µ—Å—Ç–æ–≤
    while True:
        schedule.run_pending()
        time.sleep(1)

def start_bot():
    bot.polling(none_stop=True)

if __name__ == '__main__':
    thread_bot = threading.Thread(target=start_bot)
    thread_sched = threading.Thread(target=schedule_thread)

    thread_bot.start()
    thread_sched.start()
